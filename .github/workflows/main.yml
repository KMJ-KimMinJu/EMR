name: Deploy monorepo (SSR, partial by folder, with .env write)

on:
  push:
    branches: [ main ]
    paths:
      - 'back/**'
      - 'front/**'
      - '.github/workflows/main.yml'

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      back_changed:     ${{ steps.filter.outputs.back }}
      front_changed:    ${{ steps.filter.outputs.front }}
      fastapi_changed:  ${{ steps.filter.outputs.fastapi }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            back:
              - 'back/**'
              - '!back/fastapi/**'      # ← FastAPI는 별도 필터로 분리
            front:
              - 'front/**'
            fastapi:
              - 'back/fastapi/**'

  build-back:
    needs: detect
    if: needs.detect.outputs.back_changed == 'true'
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: back } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'back/package-lock.json'
      - run: npm ci
      - run: npm run build || echo "no build step"
      - run: tar -czf ../back.tgz .
      - uses: actions/upload-artifact@v4
        with:
          name: back-dist
          path: back.tgz

  build-front:
    needs: detect
    if: needs.detect.outputs.front_changed == 'true'
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: front } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'
      - run: npm ci
      # ✅ 빌드 직전에 NEXT_PUBLIC_API_BASE_URL 기본값 '/api' 주입
      - name: Build front (inject NEXT_PUBLIC_API_BASE_URL)
        run: |
          export NEXT_PUBLIC_API_BASE_URL="${{ secrets.NEXT_PUBLIC_API_BASE_URL }}"
          [ -z "$NEXT_PUBLIC_API_BASE_URL" ] && export NEXT_PUBLIC_API_BASE_URL="/api"
          npm run build
      - run: tar -czf ../front.tgz .
      - uses: actions/upload-artifact@v4
        with:
          name: front-dist
          path: front.tgz
          
  build-fastapi:
    needs: detect
    if: needs.detect.outputs.fastapi_changed == 'true'
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: back/fastapi } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: python -m pip install -U pip
      - run: pip install -r requirements.txt || echo "no reqs"
      - name: Pack fastapi (write tar to parent dir)
        run: |
          tar -czf ../fastapi.tgz \
            --exclude='.venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            .
      - uses: actions/upload-artifact@v4
        with:
          name: fastapi-dist
          # 방금 ../fastapi.tgz 로 만들었으니, 워크스페이스 기준 경로는 이거예요
          path: back/fastapi.tgz

        
  deploy-back:
    needs: [detect, build-back]
    runs-on: ubuntu-latest
    if: needs.detect.outputs.back_changed == 'true' && needs.build-back.result == 'success'
    steps:
      - uses: actions/download-artifact@v4
        with: { name: back-dist, path: . }
  
      - name: Ensure remote dirs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }} # 22가 아니면 이 줄 주석 해제 + 시크릿 추가
          script: |
            mkdir -p "/home/${{ secrets.SSH_USER }}/apps"
  
      - name: Copy back to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }} 
          source: "back.tgz"
          target: "/home/${{ secrets.SSH_USER }}/apps/"
  
      - name: Unpack back & install & write .env & restart (pm2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }} 
          script: |
            set -e
            BASE="/home/${{ secrets.SSH_USER }}/apps"
            mkdir -p "$BASE/back"
            tar -xzf "$BASE/back.tgz" -C "$BASE/back"
            cd "$BASE/back"
  
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
  
            npm ci --omit=dev
  
            : > .env
            PORT_VAL="${{ secrets.BACK_PORT }}"; [ -z "$PORT_VAL" ] && PORT_VAL=4000
            printf "PORT=%s\n" "$PORT_VAL"   >> .env
            printf "HOST=127.0.0.1\n"       >> .env
            printf "DB_HOST=%s\n"  "${{ secrets.DB_HOST }}"   >> .env
            printf "DB_USER=%s\n"  "${{ secrets.DB_USER }}"   >> .env
            printf "DB_PASS=%s\n"  "${{ secrets.DB_PASS }}"   >> .env
            printf "DB_NAME=%s\n"  "${{ secrets.DB_NAME }}"   >> .env
            chmod 600 .env
  
            pm2 restart emr-back || pm2 start "node server.js" --name emr-back
            pm2 save

  deploy-front:
    needs: [detect, build-front]
    runs-on: ubuntu-latest
    if: needs.detect.outputs.front_changed == 'true' && needs.build-front.result == 'success'
    steps:
      - uses: actions/download-artifact@v4
        with: { name: front-dist, path: . }
  
      - name: Ensure remote dirs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p "/home/${{ secrets.SSH_USER }}/apps"
  
      - name: Copy front to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: "front.tgz"
          target: "/home/${{ secrets.SSH_USER }}/apps/"
  
      - name: Unpack front & install & restart (pm2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            BASE="/home/${{ secrets.SSH_USER }}/apps"
            mkdir -p "$BASE/front"
            tar -xzf "$BASE/front.tgz" -C "$BASE/front"
            cd "$BASE/front"
  
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
  
            npm ci --omit=dev
  
            export NODE_ENV=production
            export PORT="${{ secrets.FRONT_PORT }}"; [ -z "$PORT" ] && export PORT=15018
            export NEXT_PUBLIC_API_BASE_URL="${{ secrets.NEXT_PUBLIC_API_BASE_URL }}"
            [ -z "$NEXT_PUBLIC_API_BASE_URL" ] && export NEXT_PUBLIC_API_BASE_URL="/api"
  
            pm2 restart emr-front --update-env || pm2 start "npm -- start -p $PORT" --name emr-front
            pm2 save
            
  deploy-fastapi:
    needs: [detect, build-fastapi]
    runs-on: ubuntu-latest
    if: needs.detect.outputs.fastapi_changed == 'true' && needs.build-fastapi.result == 'success'
    steps:
      - uses: actions/download-artifact@v4
        with: { name: fastapi-dist, path: . }

      - name: Ensure remote dirs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p "/home/${{ secrets.SSH_USER }}/apps"

      - name: Copy fastapi to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: "fastapi.tgz"
          target: "/home/${{ secrets.SSH_USER }}/apps/"

      - name: Unpack & venv & start (pm2+uvicorn)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            BASE="/home/${{ secrets.SSH_USER }}/apps"
            mkdir -p "$BASE/fastapi"
            tar -xzf "$BASE/fastapi.tgz" -C "$BASE/fastapi"
            cd "$BASE/fastapi"

            # pm2 보장
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2

            # Python/venv
            command -v python3 >/dev/null 2>&1 || { echo "python3 not found"; exit 1; }
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U pip
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install "fastapi>=0.110,<1" "uvicorn[standard]>=0.30,<1" "pydantic>=2,<3" "python-dotenv>=1,<2"
            fi

            PORT=8000
            pm2 restart emr-fastapi \
              || pm2 start "bash -lc 'cd $BASE/fastapi && . .venv/bin/activate && uvicorn main:app --host 127.0.0.1 --port $PORT'" --name emr-fastapi
            pm2 save
